# 게임 개발 - 시뮬레이션
# 1*1 크기의 정사각형으로 이루어진 N*M 크기 직사각형 장소에서 게임 캐릭터가 움직임.
# 각각의 칸은 육지 또는 바다, 캐릭터는 동서남북 중 한곳을 바라봄, 바다는 갈 수 없음
# 맵의 각 칸은 (A,B)로 나타낼 수 있고, A는 북쪽으로부터 떨어진 칸의 개수, B는 서쪽으로부터 떨어진 칸의 개수
# 현재 위치에서 현재 방향을 기준으로 왼쪽(반시계 방향으로 90도 회전한 방향)부터 차례대로 갈 곳을 정함
# 캐릭터의 바로 왼쪽 방향에 아직 가보지 않은 칸이 존재한다면, 왼쪽 방향으로 회전한 다음 왼쪽으로 한 칸 전진
# 왼쪽 방향에 가보지 않은 칸이 없다면, 왼쪽 방향으로 회전만 수행
# 만약 네 방향 모두 이미 가본 칸이거나 바다로 되어 있는 칸인 경우에는, 바라보는 방향을 유지한 채로 한 칸 뒤로가고 1단계로 돌아감.
# 이 때 뒤쪽 방향이 바다인 칸이라 뒤로 갈 수 없는 경우에는 움직임을 멈춘다

# 입력 : 첫째 줄 : 맵의 세로 크기 N, 가로크기 M 공백으로 입력
#       둘째 줄 : 게임 캐릭터가 있는 칸의 좌표(A,B)와 바라보는 방향d가 서로 공백으로 구분하여 주어짐
#                                                     d - 0:북 , 1:동, 2:남, 3:서
#       셋째 줄부터 : 맵이 육지인지 바다인지에 대한 정보. 북 -> 남, 서 -> 동
#                       0       1
# 출력 : 방문한 칸의 수

# 입력 예제 :
# 4 4
# 1 1 0
# 1 1 1 1
# 1 0 0 1
# 1 1 0 1
# 1 1 1 1

# 방향을 설정해서 이동하는 문제에서는 dx, dy라는 별도의 리스트를 만들어 방향을 정하는 것이 효과적임.
# 문제가 길고 문제를 바르게 이해하여 소스코드로 옮기려면 반복 숙달이 필요함

n, m = map(int, input().split())
d = [[0]*m for _ in range(n)]

x, y, direction = map(int, input().split())
d[x][y] = 1  # 현재 좌표 방문 처리

# 전체 맵 정보 입력
array = []
for i in range(n):
    array.append(list(map(int, input().split())))

# 북, 동, 남, 서
# 아이디어 : 현재 캐릭터가 북쪽을 바라보고 있으면 x, y 에 dx[0] dy[0]을 더한다
dx = [-1, 0, 1, 0]
dy = [0, 1, 0, -1]

# 왼쪽으로 회전하는 함수


def turn_left():
    global direction
    direction -= 1
    if direction == -1:
        direction = 3


# 본 코드
count = 1
turn_time = 0  # 제자리에서 네 방향 모두 돌았는지 세기 위해
while True:
    turn_left()
    nx = x + dx[direction]
    ny = y + dy[direction]
    # 회전 후 정면에 가보지 않은 칸이 존재하는 경우
    if d[nx][ny] == 0 and array[nx][ny] == 0:
        d[nx][ny] = 1  # 방문처리
        x = nx
        y = ny
        count += 1
        turn_time = 0
        continue
    # 회전한 이후 가보지 않은 칸이 없거나 바다인 경우
    else:
        turn_time += 1
    # 네 방향 모두 갈 수 없는 경우
    if turn_time == 4:
        nx = x - dx[direction]
        ny = y - dy[direction]
        # 뒤로 갈 수 있다면
        if array[nx][ny] == 0:
            x = nx
            y = ny
        # 바다로 막혀있는 경우
        else:
            break
        turn_time = 0

print(count)
