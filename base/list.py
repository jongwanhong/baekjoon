#index는 0부터 . 비어있는 리스트 선언 시 list() 혹은 대괄호([])이용

a = [1, 2, 3, 4, 5, 6, 7, 8, 9]
print(a)

# 인덱스 4, 즉 다섯 번째 원소에 접근
print(a[4])

# 빈 리스트 선언 방법 1)
a = list()
print(a)

# 빈 리스트 선언 방법 2)
a = []
print(a)

# 코테 문제에서 주로 N인 1차원 리스트를 초기화해야 하는데 다음 방식으로 초기화하면 편리함
# 크기가 N이고, 모든 값이 0인 1차원 리스트를 초기화하는 소스코드
n = 10
a = [0] * n
print(a)

#리스트의 인덱싱 / 슬라이싱

a = [1, 2, 3, 4, 5, 6, 7, 8, 9]
# 뒤에서 첫 번째 원소 출력
print(a[-1])
# 뒤에서 세 번째
# print(a[-3])

# 네 번째 원소 값 변경
a[3] = 7
print(a)

# 두 번째 원소부터 네 번째 원소까지
print(a[1:4])

# 리스트 컴프리헨션 - 리스트를 초기화하는 방법 중 하나
# 대괄호 안에 조건문과 반복문을 넣는 방식으로 리스트를 초기화 할 수 있다
# 0부터 19까지의 수 중에서 홀수만 포함하는 리스트
array = [i for i in range(20) if i % 2 == 1]
print(array)

# 1부터 9까지의 수의 제곱 값을 포함하는 리스트
array = [i * i for i in range(1, 10)]
print(array)

# 리스트 컴프리헨션의 활용2 - 2차원 리스트 초기화
# N * M 크기의 2차원 리스트 초기화
n = 3
m = 4
array = [[0] * m for _ in range(n)]
print(array)

# 반복을 수행하되 반복을 위한 변수의 값을 무시하고자 할 때 언더바(_)를 쓴다.

for _ in range(5):
    print("Hello World")

# 참고로 특정 크기의 2차원 리스트를 초기화할 때는 반드시 리스트 컴프리헨션을 이용해야 한다.
# N * M 크기의 2차원 리스트 초기화(잘못된 방법)
n = 3
m = 4
array = [[0] * m] * n
print(array)

array[1][1] = 5
print(array)