# 두 배열의 원소 교체
# 두 개의 배열 A B, N개의 원소로 구성, 원소는 모두 자연수
# 최대 K번의 바꿔치기 연산(배열 A,배열 B에 있는 원소들을 하나씩 골라 바꾸는 것) -> 배열 A의 원소의 합이 최대가 되어야 함

# 아이디어 -> 배열 A의 원소의 합이 최대가 되어야 하므로 배열 A는 오름차순, 배열 B는 내림차순 정렬 후 앞의 원소부터 바꿔준다.
# 위에서 옵션이 들어가야 했다 -> 정렬 후 A의 원소가 B의 원소보다 작은 경우에 교체해야 한다.

# 입력 : N, K 공백 구분
# 두번째 줄 A의 원소 공백 구분
# 세번째 줄 B의 원소 공백 구분

# 출력 -> 배열 A의 모든 원소의 합의 최댓값

# 입력 예
# 5 3
# 1 2 5 4 3
# 5 5 6 6 5

n, k = map(int, input().split())
a = list(map(int, input().split()))
b = list(map(int, input().split()))

a.sort()
b.sort(reverse=True)

for i in range(k):
    if a[i] < b[i]:
        a[i], b[i] = b[i], a[i]
    else:  # 아닐 경우에는 바로 반복문을 탈출하면 배열 A의 모든 원소의 합이 최댓값이 된다.
        break

print(sum(a))
